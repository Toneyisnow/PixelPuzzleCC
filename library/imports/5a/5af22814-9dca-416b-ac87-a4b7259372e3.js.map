{"version":3,"sources":["../../../../../../assets/Scripts/UI/Controls/assets/Scripts/UI/Controls/HintBoardRenderer.js"],"names":["require","cc","Class","extends","Component","properties","boardWidth","boardHeight","poemId","poemDefinition","default","type","PoemDefinition","puzzleDefinition","PuzzleDefinition","stageDefinition","StageDefinition","characterAnchors","Node","poemBoardPrefab","Prefab","hintBoard","HintBoard","init","console","log","onLoad","self","lines","selectedLines","lineCount","columnCount","i","length","j","characterId","content","pushCharacter","GlobalStorage","loadCharacterSpriteFrame","characterSpriteFrame","ii","jj","node","charSprite","addComponent","Sprite","spriteFrame","charIndex","anchor","position","x","y","addChild","getCharacterTag","v2","isUncoveredChar","setUncoveredAt","setCharUncoveredEffect","setCharCoveredEffect","index","onReceivedCharacter","charCount","charList","isUncoveredAt","isBoardAllClear","emit","hasAnimation","opacity","ani1","scaleTo","ani2","runAction","sequence","start"],"mappings":"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","file":"HintBoardRenderer.js","sourceRoot":"../../../../../../assets/Scripts/UI/Controls","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nrequire('GlobalStorage');\r\n\r\nrequire('PoemDefinition');\r\nrequire('StageDefinition');\r\nrequire('PuzzleDefinition');\r\nrequire('HintBoard');\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n        boardWidth: 1,\r\n        \r\n        boardHeight: 1,\r\n        \r\n        poemId: 0,\r\n        \r\n        poemDefinition: {\r\n            default: null,\r\n            type: cc.PoemDefinition\r\n        },\r\n        \r\n        puzzleDefinition: {\r\n            default: null,\r\n            type: cc.PuzzleDefinition\r\n        },\r\n        \r\n        stageDefinition: {\r\n            default: null,\r\n            type: cc.StageDefinition\r\n        },\r\n        \r\n        characterAnchors: {\r\n            default: [],\r\n            type: cc.Node\r\n        },\r\n        \r\n        poemBoardPrefab: cc.Prefab,\r\n        \r\n        hintBoard: cc.HintBoard,\r\n        \r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    init: function(stageDefinition) {\r\n    \r\n        console.log('PoemBoard init.');\r\n        \r\n        this.stageDefinition = stageDefinition;\r\n        this.poemDefinition = this.stageDefinition.poemDefinition;\r\n        this.puzzleDefinition = this.stageDefinition.puzzleDefinition;\r\n        \r\n    },\r\n\r\n\r\n    onLoad () {\r\n        \r\n        if (!this.poemDefinition) {\r\n        \r\n            console.log('poemDefinition is null.');\r\n            return;\r\n        }\r\n        \r\n        var self = this;\r\n        \r\n        //cc.loader.loadRes(\"characters/chars_fzlb\", cc.SpriteAtlas, function (err, atlas) {\r\n            \r\n        //    var frame = atlas.getSpriteFrame('c_7eb7');\r\n        //    self.testSprite.spriteFrame = frame;\r\n        //});\r\n        \r\n        let lines = this.puzzleDefinition.selectedLines;\r\n        \r\n        let lineCount = this.poemDefinition.lineCount;\r\n        let columnCount = this.poemDefinition.columnCount;\r\n        this.hintBoard = new cc.HintBoard();\r\n        \r\n        \r\n        //cc.loader.loadRes(\"characters/chars_fzlb\", cc.SpriteAtlas, function (err, atlas) {\r\n            \r\n        //    var frame = atlas.getSpriteFrame('c_7eb7');\r\n            \r\n            //var node = new cc.Node();\r\n            //let charSprite = node.addComponent(cc.Sprite);\r\n            //charSprite.spriteFrame = frame;\r\n            //node.zIndex = 10;\r\n            \r\n            //anchor.addChild(node);\r\n            \r\n        //    self.testSprite.spriteFrame = frame;\r\n        //});\r\n        \r\n        console.log('onLoad: loading PoemDefinitions. Total length: ', lineCount, columnCount);\r\n        console.log('selectedLines: ', lines);\r\n        for (var i = 0; i < lines.length; ++i) {\r\n            for (var j = 0; j < columnCount; ++j) {\r\n                \r\n                var characterId = this.poemDefinition.content[lines[i]][j];\r\n                this.hintBoard.pushCharacter(characterId);\r\n                \r\n                cc.GlobalStorage.loadCharacterSpriteFrame(characterId, i, j, function(characterSpriteFrame, ii, jj) {\r\n        \r\n                    var node = new cc.Node();\r\n                    let charSprite = node.addComponent(cc.Sprite);\r\n                    charSprite.spriteFrame = characterSpriteFrame;\r\n                    \r\n                    var charIndex = ii * columnCount + jj;\r\n                    var anchor = self.characterAnchors[charIndex];\r\n                    console.log('anchor position:', anchor.position.x, anchor.position.y);\r\n                    \r\n                    anchor.addChild(node, 1, self.getCharacterTag(charIndex));\r\n                    node.position = cc.v2(0, 0);\r\n                    \r\n                    console.log('checking uncovered for charIndex: ', charIndex);\r\n                    if (self.puzzleDefinition.isUncoveredChar(charIndex)) {\r\n                        \r\n                        self.hintBoard.setUncoveredAt(charIndex);\r\n                        self.setCharUncoveredEffect(anchor, true);\r\n                    } else {\r\n                        self.setCharCoveredEffect(anchor);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    },\r\n    \r\n    getCharacterTag: function(index) {\r\n        return 'char_' + index;\r\n    },\r\n    \r\n    // On this board has received character\r\n    onReceivedCharacter: function(characterId) {\r\n        \r\n        console.log('HintBoardRenderer onReceivedCharacter: ', characterId);\r\n        for (var i = 0; i < this.hintBoard.charCount; i++) {\r\n            \r\n            // console.log('HintBoardRenderer: comparing char:', this.hintBoard.charList[i], characterId);\r\n            if (this.hintBoard.charList[i] == characterId && !this.hintBoard.isUncoveredAt(i)) {\r\n                this.hintBoard.setUncoveredAt(i);\r\n                \r\n                var anchor = this.characterAnchors[i];\r\n                if (anchor) {\r\n                    this.setCharUncoveredEffect(anchor, true);\r\n                }\r\n                \r\n                if (!this.isBoardAllClear()) {\r\n                    this.node.emit('allclear');\r\n                }\r\n                \r\n                return;\r\n            }                \r\n        }\r\n    },\r\n    \r\n    isBoardAllClear: function() {\r\n    \r\n        for (var i = 0; i < this.hintBoard.charCount; i++) {\r\n            if (!this.hintBoard.isUncoveredAt(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    },\r\n    \r\n    setCharUncoveredEffect: function(node, hasAnimation) {\r\n        node.opacity = 255;\r\n        \r\n        if (hasAnimation) {\r\n        \r\n            var ani1 = cc.scaleTo(0.1, 1.2);\r\n            var ani2 = cc.scaleTo(0.8, 1.0);\r\n            node.runAction(cc.sequence(ani1, ani2));\r\n        }\r\n    },\r\n    \r\n    setCharCoveredEffect: function(node) {\r\n        node.opacity = 64;\r\n    },\r\n    \r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}